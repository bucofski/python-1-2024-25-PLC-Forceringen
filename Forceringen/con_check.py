# sql_server_insert.py
import json
from sqlalchemy import text
from Forceringen.util.unified_db_connection import DatabaseConnection
from Forceringen.util.config_manager import ConfigLoader


class SQLServerInserter:
    """Handle SQL Server inserts with proper transaction management"""

    def __init__(self, config_loader):
        self.config_loader = config_loader

    def insert_bits_data(self, plc_name, resource_name, bits_data):
        """
        Insert bits data using the stored procedure with proper transaction handling
        """
        try:
            db = DatabaseConnection(self.config_loader)

            with db:  # This ensures proper connection management
                # Start a transaction
                trans = db.sync_connection.begin()

                try:
                    # Convert data to JSON string
                    json_data = json.dumps(bits_data)

                    # Call the stored procedure
                    result = db.sync_connection.execute(
                        text("EXEC upsert_plc_bits :plc_name, :resource_name, :bits_data"),
                        {
                            "plc_name": plc_name,
                            "resource_name": resource_name,
                            "bits_data": json_data
                        }
                    )

                    # Get the result
                    result_row = result.fetchone()
                    success = result_row[0] if result_row else False
                    message = result_row[1] if result_row else "No result"
                    bits_processed = result_row[2] if result_row else 0

                    if success:
                        trans.commit()  # Explicitly commit the transaction
                        print(f"‚úÖ SUCCESS: {message}")
                        print(f"üìä Processed {bits_processed} bits")
                        return True
                    else:
                        trans.rollback()
                        print(f"‚ùå FAILED: {message}")
                        return False

                except Exception as e:
                    trans.rollback()
                    print(f"‚ùå Transaction failed: {e}")
                    return False

        except Exception as e:
            print(f"‚ùå Connection failed: {e}")
            return False

    def verify_insert(self, plc_name, resource_name):
        """Verify that data was actually inserted"""
        try:
            db = DatabaseConnection(self.config_loader)

            with db:
                result = db.sync_connection.execute(
                    text("""
                         SELECT rb.bit_number, rb.kks, rb.value, rb.force_active
                         FROM resource_bit rb
                                  INNER JOIN plc p ON rb.plc_id = p.plc_id
                                  INNER JOIN resource r ON rb.resource_id = r.resource_id
                         WHERE p.plc_name = :plc_name
                           AND r.resource_name = :resource_name
                         ORDER BY rb.bit_number
                         """),
                    {"plc_name": plc_name, "resource_name": resource_name}
                )

                rows = result.fetchall()
                print(f"üîç Found {len(rows)} records in database:")

                for row in rows[:5]:  # Show first 5 records
                    print(f"  Bit: {row[0]}, KKS: {row[1]}, Value: {row[2]}, Active: {row[3]}")

                if len(rows) > 5:
                    print(f"  ... and {len(rows) - 5} more records")

                return len(rows) > 0

        except Exception as e:
            print(f"‚ùå Verification failed: {e}")
            return False


# Example usage function
def test_insert_with_verification():
    """Test the insert with verification"""

    # Sample data (use your actual converted data)
    sample_data = [
        {
            "name_id": "TEST_BIT_03",
            "KKS": "System.Test.Bit04",
            "VAR_Type": "BOOL",
            "Comment": "Test bit for verification",
            "Second_comment": "Generated by Python script",
            "Value": "True"
        },
        {
            "name_id": "TEST_BIT_04",
            "KKS": "System.Test.Bit04",
            "VAR_Type": "REAL",
            "Comment": "Another test bit",
            "Second_comment": "Generated by Python script",
            "Value": "123.45"
        }
    ]

    config_loader = ConfigLoader("../Forceringen/config/plc.yaml")
    inserter = SQLServerInserter(config_loader)

    print("üöÄ Starting insert test...")

    # Insert the data
    success = inserter.insert_bits_data("BTEST", "NIET", sample_data)

    if success:
        print("\nüîç Verifying insert...")
        inserter.verify_insert("BTEST", "NIET")
    else:
        print("\n‚ùå Insert failed, skipping verification")


if __name__ == "__main__":
    test_insert_with_verification()